# -*- coding: utf-8 -*-
"""Weather Prediction Using Random Forest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/175xV8nXcAf5RovOGFi5Q0FEGlhuaK98W
"""

# Pastikan menggunakan Google Colab
# Install library yang dibutuhkan
!pip install pandas scikit-learn openpyxl

"""**Rule spesifik**"""

# Import library utama
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score
import numpy as np

# Fungsi untuk membaca dataset dan melakukan preprocessing
def load_and_preprocess_data(filepath):
    """
    Membaca file .xlsx dan memproses data menjadi input untuk model.
    """
    # Membaca file excel
    data = pd.read_excel(filepath)

    # Menentukan label cuaca berdasarkan aturan
    def label_weather(row):
        temp, wind, humidity = row['suhu_avg'], row['wind_avg'], row['humidity_avg']
        if 15 <= temp <= 20 and 5.0 <= wind <= 10.0 and 70 <= humidity <= 100:
            return "Badai"
        elif 15 <= temp <= 25 and 4.0 <= wind <= 10.0 and 60 <= humidity <= 100:
            return "Hujan Lebat"
        elif 15 <= temp <= 25 and 2.0 <= wind <= 10.0 and 50 <= humidity <= 100:
            return "Hujan Ringan"
        elif 15 <= temp <= 25 and 0.1 <= wind <= 10.0 and 40 <= humidity <= 100:
            return "Mendung"
        elif 20 <= temp <= 30 and 0.1 <= wind <= 10.0 and 30 <= humidity <= 100:
            return "Berawan"
        elif 25 <= temp <= 36 and 0.1 <= wind <= 10.0 and 30 <= humidity <= 100:
            return "Cerah"
        else:
            return "Tidak Terdefinisi"

    # Menambahkan kolom label
    data['weather'] = data.apply(label_weather, axis=1)

    # Menghapus baris dengan label "Tidak Terdefinisi"
    data = data[data['weather'] != "Tidak Terdefinisi"]

    # Mapping kategori cuaca ke angka
    category_mapping = {category: code for code, category in enumerate(data['weather'].astype('category').cat.categories)}
    data['weather'] = data['weather'].map(category_mapping)

    return data, {v: k for k, v in category_mapping.items()}

# Fungsi untuk melatih model Random Forest
def train_random_forest(data):
    """
    Melatih model Random Forest berdasarkan dataset yang diproses.
    """
    X = data[['suhu_avg', 'wind_avg', 'humidity_avg']]
    y = data['weather']

    # Split data menjadi training dan testing
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Inisialisasi dan pelatihan model
    model = RandomForestClassifier(random_state=42, n_estimators=100)
    model.fit(X_train, y_train)

    # Evaluasi model
    y_pred = model.predict(X_test)
    print("Classification Report:")
    print(classification_report(y_test, y_pred))
    print("Accuracy: {:.2f}%".format(accuracy_score(y_test, y_pred) * 100))

    return model

# Fungsi untuk memprediksi cuaca berdasarkan input user
def predict_weather(model, suhu, wind, humidity, category_mapping):
    """
    Memprediksi cuaca berdasarkan input pengguna.
    """
    # Membuat input sebagai DataFrame dengan nama kolom yang sesuai
    input_data = pd.DataFrame([[suhu, wind, humidity]], columns=['suhu_avg', 'wind_avg', 'humidity_avg'])
    prediction = model.predict(input_data)
    return category_mapping[prediction[0]]

# Path ke dataset
file_path = '/content/dataset_weather_labeled rf(3).xlsx'

# Load dan preprocess data
data, category_mapping = load_and_preprocess_data(file_path)

# Train model
model = train_random_forest(data)

# Input user untuk prediksi
print("\nContoh Prediksi Cuaca:")
suhu = float(input("Masukkan suhu (5.0 - 36.0): "))
wind = float(input("Masukkan kecepatan angin (0.1 - 10.0): "))
humidity = float(input("Masukkan kelembapan (30 - 100): "))

# Prediksi
prediction = predict_weather(model, suhu, wind, humidity, category_mapping)
print(f"Hasil prediksi cuaca: {prediction}")

"""**Rule generik**"""

# Import library utama
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score
import numpy as np

# Fungsi untuk membaca dataset dan melakukan preprocessing
def load_and_preprocess_data(filepath):
    """
    Membaca file .xlsx dan memproses data menjadi input untuk model.
    """
    # Membaca file excel
    data = pd.read_excel(filepath)

    # Menentukan label cuaca berdasarkan aturan
    def label_weather(row):
        temp, wind, humidity = row['suhu_avg'], row['wind_avg'], row['humidity_avg']
        if 25 <= temp <= 36 and 0.1 <= wind <= 10.0 and 30 <= humidity <= 100:
            return "Cerah"
        elif 20 <= temp <= 30 and 0.1 <= wind <= 10.0 and 30 <= humidity <= 100:
            return "Berawan"
        elif 15 <= temp <= 25 and 0.1 <= wind <= 10.0 and 40 <= humidity <= 100:
            return "Mendung"
        elif 15 <= temp <= 25 and 2.0 <= wind <= 10.0 and 50 <= humidity <= 100:
            return "Hujan Ringan"
        elif 15 <= temp <= 25 and 4.0 <= wind <= 10.0 and 60 <= humidity <= 100:
            return "Hujan Lebat"
        elif 15 <= temp <= 20 and 5.0 <= wind <= 10.0 and 70 <= humidity <= 100:
            return "Badai"
        else:
            return "Tidak Terdefinisi"

    # Menambahkan kolom label
    data['weather'] = data.apply(label_weather, axis=1)

    # Menghapus baris dengan label "Tidak Terdefinisi"
    data = data[data['weather'] != "Tidak Terdefinisi"]

    # Mapping kategori cuaca ke angka
    category_mapping = {category: code for code, category in enumerate(data['weather'].astype('category').cat.categories)}
    data['weather'] = data['weather'].map(category_mapping)

    return data, {v: k for k, v in category_mapping.items()}

# Fungsi untuk melatih model Random Forest
def train_random_forest(data):
    """
    Melatih model Random Forest berdasarkan dataset yang diproses.
    """
    X = data[['suhu_avg', 'wind_avg', 'humidity_avg']]
    y = data['weather']

    # Split data menjadi training dan testing
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Inisialisasi dan pelatihan model
    model = RandomForestClassifier(random_state=42, n_estimators=100)
    model.fit(X_train, y_train)

    # Evaluasi model
    y_pred = model.predict(X_test)
    print("Classification Report:")
    print(classification_report(y_test, y_pred))
    print("Accuracy: {:.2f}%".format(accuracy_score(y_test, y_pred) * 100))

    return model

# Fungsi untuk memprediksi cuaca berdasarkan input user
def predict_weather(model, suhu, wind, humidity, category_mapping):
    """
    Memprediksi cuaca berdasarkan input pengguna.
    """
    # Membuat input sebagai DataFrame dengan nama kolom yang sesuai
    input_data = pd.DataFrame([[suhu, wind, humidity]], columns=['suhu_avg', 'wind_avg', 'humidity_avg'])
    prediction = model.predict(input_data)
    return category_mapping[prediction[0]]

# Path ke dataset
file_path = '/content/dataset_weather_labeled rf(3).xlsx'

# Load dan preprocess data
data, category_mapping = load_and_preprocess_data(file_path)

# Train model
model = train_random_forest(data)

# Input user untuk prediksi
print("\nContoh Prediksi Cuaca:")
suhu = float(input("Masukkan suhu (15.0 - 36.0): "))
wind = float(input("Masukkan kecepatan angin (0.1 - 10.0): "))
humidity = float(input("Masukkan kelembapan (30 - 100): "))

# Prediksi
prediction = predict_weather(model, suhu, wind, humidity, category_mapping)
print(f"Hasil prediksi cuaca: {prediction}")